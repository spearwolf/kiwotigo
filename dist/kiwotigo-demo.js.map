{"version":3,"file":"kiwotigo-demo.js","sources":["../kiwotigo.mjs","../kiwotigo-painter.mjs","../kiwotigo-demo.mjs"],"sourcesContent":["const worker = new Worker('kiwotigo.worker.js')\n\nconst tmpResolvers = new Map()  // temporary id -> resolve: Promise.resolve(), onProgressFn\n\nconst createMessageId = (() => {\n  let lastId = 0\n  return () => {\n    ++lastId\n    return `kiwotigo-${lastId.toString(36)}`\n  }\n})()\n\nworker.onmessage = ({data}) => {\n  const { id, type } = data\n  const resolve = tmpResolvers.get(id)\n  if (resolve) {\n    switch (type) {\n      case 'progress':\n        if (resolve.onProgressFn) {\n          resolve.onProgressFn(data.progress)\n        }\n        break\n\n      case 'result':\n        tmpResolvers.delete(id)\n        delete data.type\n        if (data.originData) {\n          localStorage.setItem('kiwotigoOriginData',\n            typeof data.originData === 'string'\n              ? data.originData\n              : JSON.stringify(data.originData)\n          )\n        }\n        resolve.resolve(data)\n        break\n\n      default:\n        console.warn('unknown message type:', type, data)\n    }\n  }\n}\n\nexport const build = (config, onProgressFn) => new Promise(resolve => {\n  const id = createMessageId()\n  tmpResolvers.set(id, { resolve, onProgressFn })\n  worker.postMessage({ ...config, id })\n})\n","const REGION_OUTLINE_STROKE = \"#c5c5c5\";\nconst REGION_BASE_PATH_FILL = \"#e7e7e7\";\nconst REGION_FULL_PATH_FILL = \"#f5f5f5\";\nconst REGION_RADIUS_STROKE = \"#a1a1a1\";\nconst REGION_OUTER_RADIUS_STROKE = \"#bababa\";\nconst CONNECTION_STROKE = \"#f5b\";\n\nfunction clearCanvas(ctx) {\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n}\n\nfunction drawPath(ctx, regions, pathName, stroke = false) {\n  regions.forEach((region) => {\n    const path = region[pathName];\n\n    ctx.beginPath();\n    ctx.moveTo(path[0], path[1]);\n    const len = path.length >> 1;\n    for (let i = 1; i < len; i++) {\n      ctx.lineTo(path[i << 1], path[(i << 1) + 1]);\n    }\n    ctx.closePath();\n\n    ctx.fill();\n    if (stroke) {\n      ctx.stroke();\n    }\n  });\n}\n\nfunction drawRegions(ctx, continent, drawBasePath) {\n  ctx.strokeStyle = REGION_OUTLINE_STROKE;\n  ctx.lineWidth = 1;\n\n  ctx.fillStyle = REGION_FULL_PATH_FILL;\n  drawPath(ctx, continent.regions, \"fullPath\", true);\n\n  if (drawBasePath) {\n    ctx.fillStyle = REGION_BASE_PATH_FILL;\n    drawPath(ctx, continent.regions, \"basePath\");\n  }\n}\n\nfunction drawRegionsBase(ctx, continent) {\n  ctx.lineWidth = 1;\n\n  continent.regions.forEach(({ centerPoint: cp }) => {\n    ctx.strokeStyle = REGION_RADIUS_STROKE;\n    ctx.beginPath();\n    ctx.arc(cp.x, cp.y, cp.iR, 0, 2 * Math.PI, false);\n    ctx.closePath();\n    ctx.stroke();\n\n    ctx.strokeStyle = REGION_OUTER_RADIUS_STROKE;\n    ctx.beginPath();\n    ctx.arc(cp.x, cp.y, cp.oR, 0, 2 * Math.PI, false);\n    ctx.closePath();\n    ctx.stroke();\n  });\n}\n\n// const getCenterPoint = (continent, regionIdx) =>\n//   continent.regions[regionIdx].centerPoint;\n\nconst getRegion = (continent, regionIdx) => continent.regions[regionIdx];\n\nfunction drawRegionsConnections(ctx, continent) {\n  ctx.setLineDash([]);\n  ctx.strokeStyle = CONNECTION_STROKE;\n  ctx.lineWidth = 2;\n\n  const alreadyDrawnConnection = new Set();\n\n  continent.regions.forEach((region) => {\n    region.neighbors.forEach((neighborId) => {\n      const connectionId =\n        region.id < neighborId\n          ? `${region.id};${neighborId}`\n          : `${neighborId};${region.id}`;\n      if (!alreadyDrawnConnection.has(connectionId)) {\n        alreadyDrawnConnection.add(connectionId);\n        const otherRegion = getRegion(continent, neighborId);\n        const isAnotherIsland = region.islandId !== otherRegion.islandId;\n\n        ctx.setLineDash(isAnotherIsland ? [2, 10] : []);\n        ctx.beginPath();\n        ctx.moveTo(region.centerPoint.x, region.centerPoint.y);\n        ctx.lineTo(otherRegion.centerPoint.x, otherRegion.centerPoint.y);\n        ctx.closePath();\n        ctx.stroke();\n      }\n    });\n  });\n\n  ctx.setLineDash([]);\n}\n\nfunction drawRegionIds(ctx, continent) {\n  ctx.font = \"bold 36px sans-serif\";\n  ctx.shadowColor = \"#fff\";\n  ctx.shadowOffsetX = 0;\n  ctx.shadowOffsetY = 0;\n  ctx.shadowBlur = 4;\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.fillStyle = \"#666\";\n\n  continent.regions.forEach(({ centerPoint: { x, y } }, i) => {\n    ctx.fillText(`${i}`, x, y);\n  });\n}\n\nexport default function draw({ ctx, icf, ...cfg }) {\n  clearCanvas(ctx);\n  drawRegions(ctx, icf, cfg.drawRegionBasePaths);\n  if (cfg.drawRegionsBase) {\n    drawRegionsBase(ctx, icf);\n  }\n  if (cfg.drawRegionConnections) {\n    drawRegionsConnections(ctx, icf);\n  }\n  if (cfg.drawRegionIds) {\n    drawRegionIds(ctx, icf);\n  }\n}\n","import { build } from \"./kiwotigo.mjs\";\nimport draw from \"./kiwotigo-painter.mjs\";\n\nconst canvas = document.getElementById(\"kiwotigoCanvas\");\nconst canvasCtx = canvas.getContext(\"2d\");\n\nconst loadingMessages = [\n  \"I will now create a new world just for you ...\",\n  \"Such a thing can take a while, though ...\",\n  \"... each country must be carefully considered ...\",\n  \"Hold on, it can't be much longer ...\",\n  \"I'm almost finished, there's just a few final touches ...\",\n];\n\nconst displayLoadingInfo = (html) => {\n  document.querySelector(\".loadingModal-info\").innerHTML = html;\n};\n\nlet currentLoadingMessageIdx = 0;\nlet displayNextLoadingMessageHandle = 0;\n\nconst showLoadingState = () => {\n  displayLoadingInfo(loadingMessages[0]);\n  currentLoadingMessageIdx = 1;\n  document.querySelector(\".loadingModal\").classList.add(\"loading\");\n  clearInterval(displayNextLoadingMessageHandle);\n  displayNextLoadingMessageHandle = setInterval(() => {\n    displayLoadingInfo(loadingMessages[currentLoadingMessageIdx]);\n    currentLoadingMessageIdx =\n      (currentLoadingMessageIdx + 1) % loadingMessages.length;\n  }, 5000);\n};\n\nconst displayProgress = (progress) => {\n  const maxWidth = document\n    .querySelector(\".loadingModal-content\")\n    .getBoundingClientRect().width;\n  const el = document.querySelector(\".loadingModal-progress\");\n  el.style.width = `${Math.round(progress * maxWidth)}px`;\n};\n\nconst hideLoadingState = () => {\n  clearInterval(displayNextLoadingMessageHandle);\n  displayProgress(1);\n  setTimeout(() => {\n    document.querySelector(\".loadingModal\").classList.remove(\"loading\");\n  }, 500);\n};\n\nconst getUpdateToggleAction = () =>\n  document.querySelector(\".kiwotigo-form-justUpdate\");\n\nconst getMapLegendOptions = () => {\n  const legendOptions = {};\n  Array.from(\n    document.querySelectorAll(\".mapLegendContainer input[type=checkbox]\")\n  ).forEach((checkbox) => {\n    legendOptions[checkbox.name] = checkbox.checked;\n  });\n  return legendOptions;\n};\n\nconst drawContinent = (() => {\n  let drawOptions;\n\n  return (options) => {\n    drawOptions = { ...drawOptions, ...options, ...getMapLegendOptions() };\n    draw(drawOptions);\n  };\n})();\n\nconst onCreate = (config) => {\n  showLoadingState();\n\n  build(config, displayProgress).then((data) => {\n    console.log(\"received new build\", data);\n    hideLoadingState();\n    getUpdateToggleAction().disabled = false;\n    document.querySelector('.mapLegendContainer').style.display = 'block';\n\n    canvas.width = data.continent.canvasWidth;\n    canvas.height = data.continent.canvasHeight;\n    // const DPR = window.devicePixelRatio || 1;\n    // if (DPR !== 1) {\n    //   canvas.style.width = `${Math.round(canvas.width / DPR)}px`;\n    //   canvas.style.height = `${Math.round(canvas.height / DPR)}px`;\n    // }\n    drawContinent({ ctx: canvasCtx, icf: data.continent });\n  });\n};\n\nconst getConfig = () => {\n  const { elements: formElements } = document.forms.kiwotigo;\n  return [\n    \"gridWidth\",\n    \"gridHeight\",\n    \"gridOuterPaddingX\",\n    \"gridOuterPaddingY\",\n    \"gridInnerPaddingX\",\n    \"gridInnerPaddingY\",\n    \"gridHexWidth\",\n    \"gridHexHeight\",\n    \"hexWidth\",\n    \"hexHeight\",\n    \"hexPaddingX\",\n    \"hexPaddingY\",\n    \"minimalGrowIterations\",\n    \"fastGrowIterations\",\n    \"maxRegionSizeFactor\",\n    \"probabilityCreateRegionAt\",\n    // \"enableExtendedConnections\",\n    \"maxExtendedOuterRangeFactor\",\n    \"canvasMargin\",\n  ].reduce((c, key) => ({ ...c, [key]: parseFloat(formElements[key].value) }), {\n    // swapXY: true,\n  });\n};\n\nconst getKiwotigoOriginData = () => localStorage.getItem(\"kiwotigoOriginData\");\n\ndocument.forms.kiwotigo.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  if (getUpdateToggleAction().checked) {\n    onCreate({ ...getConfig(), originData: getKiwotigoOriginData() });\n  } else {\n    onCreate(getConfig());\n  }\n\n  document.querySelector(\".kiwotigo-createContinentBtn\").blur();\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const originData = getKiwotigoOriginData();\n  if (originData) {\n    getUpdateToggleAction().disabled = false;\n    const originConfig = JSON.parse(originData).config;\n    onCreate({ ...originConfig, originData });\n    Array.from(Object.entries(originConfig)).forEach(([key, value]) => {\n      const el = document.querySelector(`.kiwotigo-form input[name=${key}]`);\n      if (el) {\n        el.value = value;\n      }\n    });\n  } else {\n    getUpdateToggleAction().disabled = true;\n    document.querySelector('.mapLegendContainer').style.display = 'none';\n  }\n});\n\ndocument.querySelector(\".openCloseAction\").addEventListener(\"pointerup\", () => {\n  document.querySelector(\".createContinentConfig\").classList.toggle(\"opened\");\n});\n\ngetUpdateToggleAction().addEventListener(\"change\", () => {\n  const { checked } = getUpdateToggleAction();\n  Array.from(\n    document.querySelectorAll(\".kiwotigo-form .create-only input\")\n  ).forEach((el) => {\n    el.disabled = checked;\n  });\n  document\n    .querySelector(\".kiwotigo-form\")\n    .classList[checked ? \"add\" : \"remove\"](\"just-update\");\n});\n\ndocument.querySelector(\".mapLegendContainer\").addEventListener(\"change\", () => {\n  console.debug(\"legend options\", getMapLegendOptions());\n  drawContinent(getMapLegendOptions());\n});\n\ndocument.body.addEventListener(\"pointerup\", (event) => {\n  const el = event.target;\n  if (el.tagName === \"LABEL\") {\n    const labelTarget = el.getAttribute(\"for\");\n    const targetInput = document.querySelector(`input[name=${labelTarget}]`);\n    if (targetInput && targetInput.type === \"checkbox\") {\n      targetInput.click();\n    }\n  }\n});\n"],"names":["lastId","worker","Worker","tmpResolvers","Map","createMessageId","toString","onmessage","data","id","type","resolve","get","onProgressFn","progress","originData","localStorage","setItem","JSON","stringify","console","warn","drawPath","ctx","regions","pathName","stroke","forEach","region","path","beginPath","moveTo","len","length","i","lineTo","closePath","fill","draw","icf","cfg","clearRect","canvas","width","height","clearCanvas","continent","drawBasePath","strokeStyle","lineWidth","fillStyle","drawRegions","drawRegionBasePaths","drawRegionsBase","cp","centerPoint","arc","x","y","iR","Math","PI","oR","drawRegionConnections","setLineDash","alreadyDrawnConnection","Set","neighbors","neighborId","connectionId","has","add","otherRegion","regionIdx","getRegion","isAnotherIsland","islandId","drawRegionsConnections","drawRegionIds","font","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","textAlign","textBaseline","fillText","drawOptions","document","getElementById","canvasCtx","getContext","loadingMessages","displayLoadingInfo","html","querySelector","innerHTML","currentLoadingMessageIdx","displayNextLoadingMessageHandle","displayProgress","maxWidth","getBoundingClientRect","style","round","getUpdateToggleAction","getMapLegendOptions","legendOptions","Array","from","querySelectorAll","checkbox","name","checked","drawContinent","options","onCreate","config","classList","clearInterval","setInterval","Promise","set","postMessage","build","then","log","setTimeout","remove","disabled","display","canvasWidth","canvasHeight","getConfig","formElements","forms","kiwotigo","elements","reduce","c","key","parseFloat","value","getKiwotigoOriginData","getItem","addEventListener","event","preventDefault","blur","originConfig","parse","Object","entries","el","toggle","debug","body","target","tagName","labelTarget","getAttribute","targetInput","click"],"mappings":"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"}